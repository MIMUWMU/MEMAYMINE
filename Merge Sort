from pyglet.window import Window
from pyglet.app import run
from pyglet.shapes import Rectangle
from pyglet.graphics import Batch
from pyglet import clock
import random

class Renderer(Window):
    def __init__(self):
        super().__init__(1200, 800, "Merge Sort Visualization")
        self.batch = Batch()
        self.bars = []
        self.n = 170
        self.generator = self.get_sorted_array(self.n)
        self.bar_width = 6
        self.bar_height_factor = 2
        self.create_bars()
        self.schedule_update()

    def mergesort(self, A, start, end):
        if end <= start:
            return

        mid = start + ((end - start + 1) // 2) - 1

        yield from self.mergesort(A, start, mid)
        yield from self.mergesort(A, mid + 1, end)
        yield from self.merge(A, start, mid, end)

    def merge(self, A, start, mid, end):
        merged = []
        leftIdx = start
        rightIdx = mid + 1

        while leftIdx <= mid and rightIdx <= end:
            if A[leftIdx] < A[rightIdx]:
                merged.append(A[leftIdx])
                leftIdx += 1
            else:
                merged.append(A[rightIdx])
                rightIdx += 1

        while leftIdx <= mid:
            merged.append(A[leftIdx])
            leftIdx += 1

        while rightIdx <= end:
            merged.append(A[rightIdx])
            rightIdx += 1

        for i in range(len(merged)):
            A[start + i] = merged[i]
            yield A

    def get_sorted_array(self, n):
        a = [i for i in range(1, n + 1)]
        random.shuffle(a)
        return self.mergesort(a, 0, len(a) - 1)

    def create_bars(self):
        for i, val in enumerate(next(self.generator)):
            self.create_rectangle(i * (self.bar_width + 1), 0, self.bar_width, val * self.bar_height_factor)

    def create_rectangle(self, x, y, width, height):
        rect = Rectangle(x, y, width, height, color=(255, 255, 255), batch=self.batch)
        self.bars.append(rect)

    def update_bars(self):
        data = next(self.generator)
        for rect, val in zip(self.bars, data):
            rect.height = val * self.bar_height_factor

    def schedule_update(self):
        clock.schedule_interval(self.update, 1/30)

    def update(self, dt):
        try:
            self.update_bars()
        except StopIteration:
            clock.unschedule(self.update)

    def on_draw(self):
        self.clear()
        self.batch.draw()

renderer = Renderer()
run()
