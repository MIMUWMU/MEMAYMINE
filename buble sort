from pyglet.window import Window
from pyglet.app import run
from pyglet.shapes import Rectangle
from pyglet.graphics import Batch
from pyglet import clock
import random

class Renderer(Window):
    def __init__(self):
        super().__init__(1200, 800, "Bubble Sort")
        self.batch = Batch()
        self.bars = []
        self.n = 170
        self.generator = self.get_sorted_array(self.n)
        self.bar_width = 6
        self.bar_height_factor = 2
        self.create_bars()
        self.schedule_update()

    def bubble_sort(self, A):
        n = len(A)
        for i in range(n):
            for j in range(0, n-i-1):
                if A[j] > A[j+1]:
                    A[j], A[j+1] = A[j+1], A[j]
                    yield A

    def get_sorted_array(self, n):
        a = [i for i in range(1, n + 1)]
        random.shuffle(a)
        return self.bubble_sort(a)

    def create_bars(self):
        for i, val in enumerate(next(self.generator)):
            self.create_rectangle(i * (self.bar_width + 1), 0, self.bar_width, val * self.bar_height_factor)

    def create_rectangle(self, x, y, width, height):
        rect = Rectangle(x, y, width, height, color=(255, 255, 255), batch=self.batch)
        self.bars.append(rect)

    def update_bars(self):
        data = next(self.generator)
        for rect, val in zip(self.bars, data):
            rect.height = val * self.bar_height_factor

    def schedule_update(self):
        clock.schedule_interval(self.update, 1/30)

    def update(self, dt):
        try:
            self.update_bars()
        except StopIteration:
            clock.unschedule(self.update)

    def on_draw(self):
        self.clear()
        self.batch.draw()

renderer = Renderer()
run()
