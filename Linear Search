import pyglet
import random

window_width = 800
window_height = 200
window = pyglet.window.Window(width=window_width, height=window_height, caption='Linear Search Visualization')
batch = pyglet.graphics.Batch()
num_numbers = 15
rect_size = min(window_width // num_numbers, window_height)
label_font_size = min(24, rect_size - 10)
numbers = sorted(random.sample(range(1, 30), num_numbers - 1) + [21])
index = 0
found = False
search_complete = False
def linear_search(dt):
    global index, found, search_complete
    if index < len(numbers) and not found:
        if numbers[index] == 21:
            found = True
        index += 1
    else:
        search_complete = True
pyglet.clock.schedule_interval(linear_search, 2)
@window.event
def on_draw():
    window.clear()
    start_x = (window_width - num_numbers * rect_size) // 2
    start_y = (window_height - rect_size) // 2

    for i, number in enumerate(numbers):
        x = start_x + i * rect_size
        y = start_y
        width = rect_size
        height = rect_size

        if i == index - 1 and not search_complete:
            if not found:
                color = (255, 0, 0)
            else:
                color = (0, 255, 0)
        elif found and i == index - 1:
            color = (0, 0, 0)
        else:
            color = (200, 200, 200)
        draw_rectangle_with_number(x, y, width, height, number, color)
def draw_rectangle_with_number(x, y, width, height, number, color):
    pyglet.shapes.Rectangle(x, y, width, height, color=color, batch=batch).draw()
    label = pyglet.text.Label(str(number), font_size=label_font_size, x=x+width//2, y=y+height//2, anchor_x='center', anchor_y='center', batch=batch)
    label.draw()

pyglet.app.run()

